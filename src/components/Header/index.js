import React, { Component } from 'react';
import { connect } from 'react-redux';
import global from "../../constants/styles/settings.scss";
import styles from './index.scss';
import cn from 'classnames';
import {bindActionCreators} from 'redux';
import { toggle } from '../../rootReducer';

import logo from '../../assets/images/slider-button.png';
import icon1 from '../../assets/images/checkbox_icon1.svg';

class Header extends Component {

  toggleCategory = (category) => {
    const { actions } = this.props;
    actions.toggle({
      category: category
    })
  }

  render() {
    const { goods, color } = this.props;

    return (
      <div className={styles.header}>
        <div className={cn(global.container, styles.container)}>
          <div className={styles.top}>
            <div className={styles.left_inner}>
              <div className={styles.logo}>
                <div className={styles.row}>
                  <span className={styles.name}>–ë–ò–†–ñ–ê<br />–ö–£–•–û–ù–¨</span>
                  <span className={styles.city}>–ì–æ—Ä–æ–¥: –ú–æ—Å–∫–≤–∞</span>
                </div>
                <div className={styles.row}>
                  <img src={logo} alt="" />
                </div>
              </div>
            </div>

            <div className={styles.right_inner}>

              <div className={styles.buttons}>
                <a href="#" className={styles.button}>–ú–Ω–µ –Ω—É–∂–Ω–∞ –∫—É—Ö–Ω—è</a>
                <a href="#" className={styles.button}>8(800)333-17-90</a>
              </div>

            </div>

          </div>
          <div className={styles.middle}>
            <div className={styles.title}>–£–º–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ –∫—É—Ö–æ–Ω–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏</div>
            <div className={styles.subtitle}>–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Ç–µ—Ö–Ω–∏–∫–∞ –º–æ–∂–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –Ω–∞ —Å–∫–ª–∞–¥–µ –¥–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫—É—Ö–Ω–∏, –ø–æ—Ç–æ–º –º—ã –µ—ë –ø—Ä–∏–≤–µ–∑—ë–º, –ø–æ–¥–∫–ª—é—á–∏–º –∏ –¥–∞–∂–µ –Ω–∞—É—á–∏–º –µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è üéÇ</div>
          </div>

          <div className={styles.checkboxes}>

              {Object.keys(goods).map((category) => (
                  <div key={category}>
                    <span className="toggle" onClick={(e) => {this.toggleCategory(category)}}>
                      {
                        goods[category].enabled
                        ? <span>‚úÖ</span>
                        : <span>‚ùé</span>
                      }
                    </span>
                    {' _ '}
                    <span className="select">
                      <select
                        value={goods[category].enabled ? goods[category].filter : ''}
                        onChange={(event) => {this.handleFilterSelect(event, category)}}
                        disabled={!goods[category].enabled}>
                        <option value=""></option>
                        {
                          Object.keys(goods[category].filters).map(f =>
                            <option key={f} value={f}>{goods[category].filters[f]}</option>
                          )
                        }
                      </select>
                    </span>
                  </div>
              ))}
              {
                Object.keys(color.types).map(c => (
                  <div
                    key={c}
                    className={`colorSelector ${color.selectedColor===c ? 'active' : ''}`}
                    onClick={e => this.updateColor(c)}>
                    {color.types[c].alias}
                  </div>
                ))
              }

          </div>


          <div className={styles.color_select}>
            <div className={styles.heading}>
              –ö–∞–∫–æ–≥–æ —Ü–≤–µ—Ç–∞ —Ç–µ—Ö–Ω–∏–∫–∞ –≤–∞–º –ø–æ–¥–æ–π–¥–µ—Ç?
            </div>
          </div>
        </div>

      </div>
    )
  }
};

function mapStateToProps(state, props) {
  window.state = state;
  return {
    goods: state.goods,
    color: state.color,
  };
}

function mapDispatchToProps(dispatch) {
  return {
    actions: bindActionCreators({ toggle }, dispatch)
  }
}

export default connect(mapStateToProps, mapDispatchToProps)(Header);
